<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Automate attention</title>
    <link>https://blog.brujordet.no/post/</link>
    <description>Recent content in Posts on Automate attention</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 17 Jul 2020 09:42:21 +0200</lastBuildDate>
    
	<atom:link href="https://blog.brujordet.no/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How a Simple Bash Prompt became a complicated problem</title>
      <link>https://blog.brujordet.no/post/bash/how-a-simple-bash-prompt-became-a-complicated-problem/</link>
      <pubDate>Fri, 17 Jul 2020 09:42:21 +0200</pubDate>
      
      <guid>https://blog.brujordet.no/post/bash/how-a-simple-bash-prompt-became-a-complicated-problem/</guid>
      <description>tl;dr: This is a ´problem -&amp;gt; solution´ type post, reflecting on problems I encountered while writing a bash prompt generator.
 A small need for a more informative prompt This all started about 10 years ago when I was working as a Java consultant in Oslo. We had just moved from SVN to git, and the concept of feature branches was suddenly a thing. I hadn&amp;rsquo;t really been very involved with VCS before git, but now I felt like I understood it.</description>
    </item>
    
    <item>
      <title>Building a Delivery Platform</title>
      <link>https://blog.brujordet.no/post/devops/building-a-delivery-platform/</link>
      <pubDate>Sun, 19 Jan 2020 20:28:11 +0100</pubDate>
      
      <guid>https://blog.brujordet.no/post/devops/building-a-delivery-platform/</guid>
      <description>A journey begins Almost 10 years ago I finished my Masters degree in Computer Science and started working as a consultant at KnowIt in Oslo. My team was in charge of developing the integration bus for the local municipality, and we had earned a lot of freedom with the client. We ran our own Hudson build server, we were early adopters of self hosted Github enterprise, and we deployed to production at will using a suite of in house ruby scripts.</description>
    </item>
    
    <item>
      <title>Poor man&#39;s todo list</title>
      <link>https://blog.brujordet.no/post/bash/poor-mans-todo-list/</link>
      <pubDate>Sat, 16 Nov 2019 10:45:44 +0100</pubDate>
      
      <guid>https://blog.brujordet.no/post/bash/poor-mans-todo-list/</guid>
      <description>I have two modes, completely distracted and dead focused. So naturally I need some help getting things done. I&amp;rsquo;ve tried expensive apps like Omnifocus, cli apps like Todo.txt or TaskWarrior and everything in between. In the end I realized that these apps are not for people like me. What works for me is big heavy tools for long term planning and collaboration like Jira or Trello. For my day to day stuff, the things I actually check regularly a simple checklist is more than enough.</description>
    </item>
    
    <item>
      <title>How can I move faster around the shell?</title>
      <link>https://blog.brujordet.no/post/bash/how-can-i-move-faster/</link>
      <pubDate>Sun, 10 Nov 2019 13:48:03 +0100</pubDate>
      
      <guid>https://blog.brujordet.no/post/bash/how-can-i-move-faster/</guid>
      <description>I&amp;rsquo;m horrible at waiting, so when things are slow or repetitive I tend to automate them. So when I started working on my first Java project I quickly got fed up by navigating in and out of these crazy paths. For instance moving from src/main/java/com/example/application/package/ to the test path, or back to the root of the project got boring real quick.
function backto() { # Go back to folder in path local path=${PWD%/*} while [[ $path ]]; do if [[ &amp;#34;${path##*/}&amp;#34; == &amp;#34;$1&amp;#34; ]]; then cd &amp;#34;$path&amp;#34; || return 1 break else path=${path%/*} fi done } function _backto() { # completion for backto local cur dir all _get_comp_words_by_ref cur all=$(cut -c 2- &amp;lt;&amp;lt;&amp;lt; &amp;#34;${PWD%/*}&amp;#34; | tr &amp;#39;/&amp;#39; &amp;#39;\n&amp;#39;) if [[ -z &amp;#34;$cur&amp;#34; ]]; then COMPREPLY=( $( compgen -W &amp;#34;$all&amp;#34;) ) else COMPREPLY=( $(grep -i &amp;#34;^$cur&amp;#34; &amp;lt;(echo &amp;#34;${all}&amp;#34;) | sort -u) ) fi } complete -o nospace -F _backto backto The function backto and it&amp;rsquo;s auto completion counterpart, will let me chose one of the directories in my current path to jump back to.</description>
    </item>
    
    <item>
      <title>What&#39;s going on in my shell?</title>
      <link>https://blog.brujordet.no/post/bash/whats-going-on-in-my-shell/</link>
      <pubDate>Sat, 09 Nov 2019 15:13:36 +0100</pubDate>
      
      <guid>https://blog.brujordet.no/post/bash/whats-going-on-in-my-shell/</guid>
      <description>To help me figure this out, I use a few shell functions. Firstly, I need to know what configuration file that was used.
function shell_init_file() { # Returns what would be your initfile if [[ $- == *i* ]]; then echo ~/.bashrc elif [[ -f ~/.bash_profile ]]; then echo ~/.bash_profile elif [[ -f ~/.bash_login ]]; then echo ~/.bash_login elif [[ -f ~/.profile ]]; then echo ~/.profile else echo &amp;#34;Could not find any config files.</description>
    </item>
    
  </channel>
</rss>