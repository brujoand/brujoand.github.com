<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>bash on Automate attention</title>
    <link>https://blog.brujordet.no/categories/bash/</link>
    <description>Recent content in bash on Automate attention</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 12 Jul 2021 09:58:00 +0200</lastBuildDate><atom:link href="https://blog.brujordet.no/categories/bash/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Proper auto-completion for bash aliases</title>
      <link>https://blog.brujordet.no/post/bash/proper-autocompletion-for-bash-alias/</link>
      <pubDate>Mon, 12 Jul 2021 09:58:00 +0200</pubDate>
      
      <guid>https://blog.brujordet.no/post/bash/proper-autocompletion-for-bash-alias/</guid>
      <description>Kevin in The Office once said &amp;lsquo;Why waste time say lot word when few word do trick&amp;rsquo;. These are words to live by, and this is why I love aliases. Lately though I&amp;rsquo;ve been getting really tired of writing out stuff like:
kubectl get pods -n network I was saying too many words. Step one was to start using contexts with kubectl which let&amp;rsquo;s me omit the -n network part. I used fzf to make a handy little function that would let me switch contexts quickly.</description>
    </item>
    
    <item>
      <title>How a Simple Bash Prompt became a complicated problem</title>
      <link>https://blog.brujordet.no/post/bash/how-a-simple-bash-prompt-became-a-complicated-problem/</link>
      <pubDate>Fri, 17 Jul 2020 09:42:21 +0200</pubDate>
      
      <guid>https://blog.brujordet.no/post/bash/how-a-simple-bash-prompt-became-a-complicated-problem/</guid>
      <description>tl;dr: This is a ´problem -&amp;gt; solution´ type post, reflecting on problems I encountered while writing a bash prompt generator.
 A small need for a more informative prompt This all started about 10 years ago when I was working as a Java consultant in Oslo. We had just moved from SVN to git, and the concept of feature branches was suddenly a thing. I hadn&amp;rsquo;t really been very involved with VCS before git, but now I felt like I understood it.</description>
    </item>
    
    <item>
      <title>Poor man&#39;s todo list</title>
      <link>https://blog.brujordet.no/post/bash/poor-mans-todo-list/</link>
      <pubDate>Sat, 16 Nov 2019 10:45:44 +0100</pubDate>
      
      <guid>https://blog.brujordet.no/post/bash/poor-mans-todo-list/</guid>
      <description>I have two modes, completely distracted and dead focused. So naturally I need some help getting things done. I&amp;rsquo;ve tried expensive apps like Omnifocus, cli apps like Todo.txt or TaskWarrior and everything in between. In the end I realized that these apps are not for people like me. What works for me is big heavy tools for long term planning and collaboration like Jira or Trello. For my day to day stuff, the things I actually check regularly a simple checklist is more than enough.</description>
    </item>
    
    <item>
      <title>How can I move faster around the shell?</title>
      <link>https://blog.brujordet.no/post/bash/how-can-i-move-faster/</link>
      <pubDate>Sun, 10 Nov 2019 13:48:03 +0100</pubDate>
      
      <guid>https://blog.brujordet.no/post/bash/how-can-i-move-faster/</guid>
      <description>I&amp;rsquo;m horrible at waiting, so when things are slow or repetitive I tend to automate them. So when I started working on my first Java project I quickly got fed up by navigating in and out of these crazy paths. For instance moving from src/main/java/com/example/application/package/ to the test path, or back to the root of the project got boring real quick.
function backto() { # Go back to folder in path local path=${PWD%/*} while [[ $path ]]; do if [[ &amp;#34;${path##*/}&amp;#34; == &amp;#34;$1&amp;#34; ]]; then cd &amp;#34;$path&amp;#34; || return 1 break else path=${path%/*} fi done } function _backto() { # completion for backto local cur dir all _get_comp_words_by_ref cur all=$(cut -c 2- &amp;lt;&amp;lt;&amp;lt; &amp;#34;${PWD%/*}&amp;#34; | tr &amp;#39;/&amp;#39; &amp;#39;\n&amp;#39;) if [[ -z &amp;#34;$cur&amp;#34; ]]; then COMPREPLY=( $( compgen -W &amp;#34;$all&amp;#34;) ) else COMPREPLY=( $(grep -i &amp;#34;^$cur&amp;#34; &amp;lt;(echo &amp;#34;${all}&amp;#34;) | sort -u) ) fi } complete -o nospace -F _backto backto The function backto and it&amp;rsquo;s auto completion counterpart, will let me chose one of the directories in my current path to jump back to.</description>
    </item>
    
    <item>
      <title>What&#39;s going on in my shell?</title>
      <link>https://blog.brujordet.no/post/bash/whats-going-on-in-my-shell/</link>
      <pubDate>Sat, 09 Nov 2019 15:13:36 +0100</pubDate>
      
      <guid>https://blog.brujordet.no/post/bash/whats-going-on-in-my-shell/</guid>
      <description>To help me figure this out, I use a few shell functions. Firstly, I need to know what configuration file that was used.
function shell_init_file() { # Returns what would be your initfile if [[ $- == *i* ]]; then echo ~/.bashrc elif [[ -f ~/.bash_profile ]]; then echo ~/.bash_profile elif [[ -f ~/.bash_login ]]; then echo ~/.bash_login elif [[ -f ~/.profile ]]; then echo ~/.profile else echo &amp;#34;Could not find any config files.</description>
    </item>
    
  </channel>
</rss>
